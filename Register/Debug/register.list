
register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000460  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800060c  0800060c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800060c  0800060c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800060c  0800060c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800060c  0800060c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000614  08000614  00010614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          000001bc  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   000019f2  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004fd  00000000  00000000  00021a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000118  00000000  00000000  00021f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c0  00000000  00000000  00022080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b076  00000000  00000000  00022140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001408  00000000  00000000  0003d1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00096b16  00000000  00000000  0003e5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004bc  00000000  00000000  000d50d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  000d5590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080005f4 	.word	0x080005f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	080005f4 	.word	0x080005f4

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4907      	ldr	r1, [pc, #28]	; (8000224 <__NVIC_EnableIRQ+0x38>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	6039      	str	r1, [r7, #0]
 8000232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db0a      	blt.n	8000252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	b2da      	uxtb	r2, r3
 8000240:	490c      	ldr	r1, [pc, #48]	; (8000274 <__NVIC_SetPriority+0x4c>)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	0112      	lsls	r2, r2, #4
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	440b      	add	r3, r1
 800024c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000250:	e00a      	b.n	8000268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4908      	ldr	r1, [pc, #32]	; (8000278 <__NVIC_SetPriority+0x50>)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	3b04      	subs	r3, #4
 8000260:	0112      	lsls	r2, r2, #4
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	440b      	add	r3, r1
 8000266:	761a      	strb	r2, [r3, #24]
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	e000e100 	.word	0xe000e100
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <GPIO_CONFIG>:
__attribute__((weak)) void _read(void){}
__attribute__((weak)) void _write(void){}


void GPIO_CONFIG (void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
	// port A  // PIN 0
   RCC->AHB1ENR |= (1<<0);   // clock for port A
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <GPIO_CONFIG+0x38>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <GPIO_CONFIG+0x38>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
   GPIOA->MODER |= (0<<0);  // make pin0 as input
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <GPIO_CONFIG+0x3c>)
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <GPIO_CONFIG+0x3c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	6013      	str	r3, [r2, #0]
   GPIOA->MODER |= (0<<1);
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <GPIO_CONFIG+0x3c>)
 8000296:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <GPIO_CONFIG+0x3c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	6013      	str	r3, [r2, #0]
   GPIOA->PUPDR |= (1<<1);  // pull down
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <GPIO_CONFIG+0x3c>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <GPIO_CONFIG+0x3c>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	60d3      	str	r3, [r2, #12]



}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <interrupt_config>:


void interrupt_config (void)

{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= (1<<14); //enable SYSCNFG
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <interrupt_config+0x50>)
 80002c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <interrupt_config+0x50>)
 80002c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ca:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG ->EXTICR [0] &= ~(0xf<<0);  // (0<<0) (0<<1) (0<<2) (0<<3) // configure the exti0 for pin 0
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <interrupt_config+0x54>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <interrupt_config+0x54>)
 80002d2:	f023 030f 	bic.w	r3, r3, #15
 80002d6:	6093      	str	r3, [r2, #8]
	EXTI ->IMR |= (1<<0); // disable the mask on line0 (EXTI0)
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <interrupt_config+0x58>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <interrupt_config+0x58>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= (0<<0); // disable rising edge
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <interrupt_config+0x58>)
 80002e6:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <interrupt_config+0x58>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= (1<<0);// enable falling edge
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <interrupt_config+0x58>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <interrupt_config+0x58>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority (EXTI0_IRQn, 5); // priority
 80002f8:	2105      	movs	r1, #5
 80002fa:	2006      	movs	r0, #6
 80002fc:	f7ff ff94 	bl	8000228 <__NVIC_SetPriority>
	NVIC_EnableIRQ (EXTI0_IRQn); // enable interrupt
 8000300:	2006      	movs	r0, #6
 8000302:	f7ff ff73 	bl	80001ec <__NVIC_EnableIRQ>


}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	40013800 	.word	0x40013800
 8000314:	40013c00 	.word	0x40013c00

08000318 <EXTI0_IRQHandler>:
uint32_t add = 0;
int flag = 0;
void EXTI0_IRQHandler (void){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

	if ( EXTI->PR & (1<<0))  // if my interrupt is triggered ,
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <EXTI0_IRQHandler+0x2c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	f003 0301 	and.w	r3, r3, #1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d008      	beq.n	800033a <EXTI0_IRQHandler+0x22>
	{
		flag = 1;
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <EXTI0_IRQHandler+0x30>)
 800032a:	2201      	movs	r2, #1
 800032c:	601a      	str	r2, [r3, #0]
		EXTI->PR |= (1<<0); // clear the interrupt flag
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <EXTI0_IRQHandler+0x2c>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a04      	ldr	r2, [pc, #16]	; (8000344 <EXTI0_IRQHandler+0x2c>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6153      	str	r3, [r2, #20]


	}

}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40013c00 	.word	0x40013c00
 8000348:	20000024 	.word	0x20000024

0800034c <delay>:

void delay (uint32_t delay)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]

	while (delay--);
 8000354:	bf00      	nop
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1e5a      	subs	r2, r3, #1
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1fa      	bne.n	8000356 <delay+0xa>
}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <main>:

int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	clock_config ();
 8000374:	f000 f856 	bl	8000424 <clock_config>
	//clock_Systickconfig (72000);
	GPIO_CONFIG ();
 8000378:	f7ff ff80 	bl	800027c <GPIO_CONFIG>
	interrupt_config ();
 800037c:	f7ff ff9e 	bl	80002bc <interrupt_config>
	{




		if (flag)
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <main+0x30>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0fb      	beq.n	8000380 <main+0x10>

		{
			delay (3000000);
 8000388:	4806      	ldr	r0, [pc, #24]	; (80003a4 <main+0x34>)
 800038a:	f7ff ffdf 	bl	800034c <delay>
			add++;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <main+0x38>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <main+0x38>)
 8000396:	6013      	str	r3, [r2, #0]
			flag =0;
 8000398:	4b01      	ldr	r3, [pc, #4]	; (80003a0 <main+0x30>)
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
		if (flag)
 800039e:	e7ef      	b.n	8000380 <main+0x10>
 80003a0:	20000024 	.word	0x20000024
 80003a4:	002dc6c0 	.word	0x002dc6c0
 80003a8:	20000020 	.word	0x20000020

080003ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <SystemInit+0x20>)
 80003b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <SystemInit+0x20>)
 80003b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000ed00 	.word	0xe000ed00

080003d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80003d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000408 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003d6:	490e      	ldr	r1, [pc, #56]	; (8000410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003ec:	4c0b      	ldr	r4, [pc, #44]	; (800041c <LoopFillZerobss+0x26>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003fa:	f7ff ffd7 	bl	80003ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003fe:	f000 f86f 	bl	80004e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000402:	f7ff ffb5 	bl	8000370 <main>
  bx  lr    
 8000406:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000408:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000414:	08000618 	.word	0x08000618
  ldr r2, =_sbss
 8000418:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800041c:	200001c0 	.word	0x200001c0

08000420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC_IRQHandler>
	...

08000424 <clock_config>:


#include "clock.h"
static __IO uint32_t msticks=0;
void clock_config (void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
    #define PLL_P  0  // 2
    #define PLL_N 180


	//1 turn on the HSI and wait for HSI to be ready
	RCC->CR |= (1<<16);
 8000428:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <clock_config+0xac>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a28      	ldr	r2, [pc, #160]	; (80004d0 <clock_config+0xac>)
 800042e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000432:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<16) ));
 8000434:	bf00      	nop
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <clock_config+0xac>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <clock_config+0x12>

	//2 Enable power clock and voltage regulator
	RCC->APB1ENR |= (1<<28);
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <clock_config+0xac>)
 8000444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000446:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <clock_config+0xac>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= (3<<14);    // or  PWR->CR |= (1<<14);  PWR->CR |= (1<<15);
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <clock_config+0xb0>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a20      	ldr	r2, [pc, #128]	; (80004d4 <clock_config+0xb0>)
 8000454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000458:	6013      	str	r3, [r2, #0]

   //3 flash latency and it's setting
	FLASH->ACR = (1<<8) | (1<<9) | (1<<10) | (3<<0);
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <clock_config+0xb4>)
 800045c:	f240 7203 	movw	r2, #1795	; 0x703
 8000460:	601a      	str	r2, [r3, #0]

    //4 AHB
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000462:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <clock_config+0xac>)
 8000464:	4a1a      	ldr	r2, [pc, #104]	; (80004d0 <clock_config+0xac>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	6093      	str	r3, [r2, #8]

	//5 APB1
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800046a:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <clock_config+0xac>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	4a18      	ldr	r2, [pc, #96]	; (80004d0 <clock_config+0xac>)
 8000470:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000474:	6093      	str	r3, [r2, #8]

    //6 APB2
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <clock_config+0xac>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <clock_config+0xac>)
 800047c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000480:	6093      	str	r3, [r2, #8]

	//7 configure the main pll
	RCC->PLLCFGR |= (PLL_M << 0) | (PLL_N << 6) | (PLL_P<<16) | (1<<22);
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <clock_config+0xac>)
 8000484:	685a      	ldr	r2, [r3, #4]
 8000486:	4912      	ldr	r1, [pc, #72]	; (80004d0 <clock_config+0xac>)
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <clock_config+0xb8>)
 800048a:	4313      	orrs	r3, r2
 800048c:	604b      	str	r3, [r1, #4]

	//8 enable the pll and wait for flag to be ready
	RCC->CR |= (1<<24);
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <clock_config+0xac>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <clock_config+0xac>)
 8000494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000498:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<25)));
 800049a:	bf00      	nop
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <clock_config+0xac>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d0f9      	beq.n	800049c <clock_config+0x78>

	//9 select the clock source and wait to be set
	RCC->CFGR |= (1<<1);
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <clock_config+0xac>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <clock_config+0xac>)
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & (1<<3)));
 80004b4:	bf00      	nop
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <clock_config+0xac>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	f003 0308 	and.w	r3, r3, #8
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f9      	beq.n	80004b6 <clock_config+0x92>

}
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40007000 	.word	0x40007000
 80004d8:	40023c00 	.word	0x40023c00
 80004dc:	00402d04 	.word	0x00402d04

080004e0 <__libc_init_array>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	4d0d      	ldr	r5, [pc, #52]	; (8000518 <__libc_init_array+0x38>)
 80004e4:	4c0d      	ldr	r4, [pc, #52]	; (800051c <__libc_init_array+0x3c>)
 80004e6:	1b64      	subs	r4, r4, r5
 80004e8:	10a4      	asrs	r4, r4, #2
 80004ea:	2600      	movs	r6, #0
 80004ec:	42a6      	cmp	r6, r4
 80004ee:	d109      	bne.n	8000504 <__libc_init_array+0x24>
 80004f0:	4d0b      	ldr	r5, [pc, #44]	; (8000520 <__libc_init_array+0x40>)
 80004f2:	4c0c      	ldr	r4, [pc, #48]	; (8000524 <__libc_init_array+0x44>)
 80004f4:	f000 f87e 	bl	80005f4 <_init>
 80004f8:	1b64      	subs	r4, r4, r5
 80004fa:	10a4      	asrs	r4, r4, #2
 80004fc:	2600      	movs	r6, #0
 80004fe:	42a6      	cmp	r6, r4
 8000500:	d105      	bne.n	800050e <__libc_init_array+0x2e>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	f855 3b04 	ldr.w	r3, [r5], #4
 8000508:	4798      	blx	r3
 800050a:	3601      	adds	r6, #1
 800050c:	e7ee      	b.n	80004ec <__libc_init_array+0xc>
 800050e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000512:	4798      	blx	r3
 8000514:	3601      	adds	r6, #1
 8000516:	e7f2      	b.n	80004fe <__libc_init_array+0x1e>
 8000518:	0800060c 	.word	0x0800060c
 800051c:	0800060c 	.word	0x0800060c
 8000520:	0800060c 	.word	0x0800060c
 8000524:	08000614 	.word	0x08000614

08000528 <__retarget_lock_acquire_recursive>:
 8000528:	4770      	bx	lr

0800052a <__retarget_lock_release_recursive>:
 800052a:	4770      	bx	lr

0800052c <register_fini>:
 800052c:	4b02      	ldr	r3, [pc, #8]	; (8000538 <register_fini+0xc>)
 800052e:	b113      	cbz	r3, 8000536 <register_fini+0xa>
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <register_fini+0x10>)
 8000532:	f000 b805 	b.w	8000540 <atexit>
 8000536:	4770      	bx	lr
 8000538:	00000000 	.word	0x00000000
 800053c:	0800054d 	.word	0x0800054d

08000540 <atexit>:
 8000540:	2300      	movs	r3, #0
 8000542:	4601      	mov	r1, r0
 8000544:	461a      	mov	r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 b814 	b.w	8000574 <__register_exitproc>

0800054c <__libc_fini_array>:
 800054c:	b538      	push	{r3, r4, r5, lr}
 800054e:	4d07      	ldr	r5, [pc, #28]	; (800056c <__libc_fini_array+0x20>)
 8000550:	4c07      	ldr	r4, [pc, #28]	; (8000570 <__libc_fini_array+0x24>)
 8000552:	1b64      	subs	r4, r4, r5
 8000554:	10a4      	asrs	r4, r4, #2
 8000556:	b91c      	cbnz	r4, 8000560 <__libc_fini_array+0x14>
 8000558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800055c:	f000 b850 	b.w	8000600 <_fini>
 8000560:	3c01      	subs	r4, #1
 8000562:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8000566:	4798      	blx	r3
 8000568:	e7f5      	b.n	8000556 <__libc_fini_array+0xa>
 800056a:	bf00      	nop
 800056c:	08000614 	.word	0x08000614
 8000570:	08000618 	.word	0x08000618

08000574 <__register_exitproc>:
 8000574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000578:	f8df a074 	ldr.w	sl, [pc, #116]	; 80005f0 <__register_exitproc+0x7c>
 800057c:	4606      	mov	r6, r0
 800057e:	f8da 0000 	ldr.w	r0, [sl]
 8000582:	4698      	mov	r8, r3
 8000584:	460f      	mov	r7, r1
 8000586:	4691      	mov	r9, r2
 8000588:	f7ff ffce 	bl	8000528 <__retarget_lock_acquire_recursive>
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <__register_exitproc+0x74>)
 800058e:	681c      	ldr	r4, [r3, #0]
 8000590:	b90c      	cbnz	r4, 8000596 <__register_exitproc+0x22>
 8000592:	4c16      	ldr	r4, [pc, #88]	; (80005ec <__register_exitproc+0x78>)
 8000594:	601c      	str	r4, [r3, #0]
 8000596:	6865      	ldr	r5, [r4, #4]
 8000598:	f8da 0000 	ldr.w	r0, [sl]
 800059c:	2d1f      	cmp	r5, #31
 800059e:	dd05      	ble.n	80005ac <__register_exitproc+0x38>
 80005a0:	f7ff ffc3 	bl	800052a <__retarget_lock_release_recursive>
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295
 80005a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ac:	b19e      	cbz	r6, 80005d6 <__register_exitproc+0x62>
 80005ae:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80005b2:	2201      	movs	r2, #1
 80005b4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80005b8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80005bc:	40aa      	lsls	r2, r5
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80005c4:	2e02      	cmp	r6, #2
 80005c6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80005ca:	bf02      	ittt	eq
 80005cc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80005d0:	4313      	orreq	r3, r2
 80005d2:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80005d6:	1c6b      	adds	r3, r5, #1
 80005d8:	3502      	adds	r5, #2
 80005da:	6063      	str	r3, [r4, #4]
 80005dc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80005e0:	f7ff ffa3 	bl	800052a <__retarget_lock_release_recursive>
 80005e4:	2000      	movs	r0, #0
 80005e6:	e7df      	b.n	80005a8 <__register_exitproc+0x34>
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	20000030 	.word	0x20000030
 80005f0:	20000000 	.word	0x20000000

080005f4 <_init>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr

08000600 <_fini>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr
